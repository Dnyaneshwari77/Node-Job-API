openapi: 3.0.0
info:
  title: JOB API v1
  contact: {}
  version: '1.0'
servers:
  - url: https://job-api-version-1.onrender.com/api/v1
    variables: {}
paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register User
      operationId: RegisterUser
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/RegisterUserRequest'
                - example:
                    name: John Doe
                    email: john.doe@example.com
                    password: securepassword123
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security: []
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login User
      operationId: LoginUser
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/LoginUserRequest'
                - example:
                    email: john.doe@example.com
                    password: securepassword123
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security: []
  /job:
    get:
      tags:
        - Job
      summary: Get All Jobs
      operationId: GetAllJobs
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
    post:
      tags:
        - Job
      summary: Create a Job
      operationId: CreateaJob
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/CreateaJobRequest'
                - example:
                    company: Software Solutions
                    position: Backend Developer
                    status: declined
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
    parameters: []
  /job/{id}:  # Updated path to include the job ID as a parameter
    get:
      tags:
        - Job
      summary: Get a Single Job
      operationId: GetaSingleJob
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: the job id
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
    delete:
      tags:
        - Job
      summary: Delete a Job
      operationId: DeleteaJob
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: the job id
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
    patch:
      tags:
        - Job
      summary: Update a Job
      operationId: UpdateaJob
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: the job id
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/UpdateJobRequest'
            example:
              company: Updated Company
              position: Updated Position
              status: updated
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
components:
  schemas:
    RegisterUserRequest:
      title: RegisterUserRequest
      required:
        - name
        - email
        - password
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
      example:
        name: John Doe
        email: john.doe@example.com
        password: securepassword123
    LoginUserRequest:
      title: LoginUserRequest
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: john.doe@example.com
        password: securepassword123
    CreateaJobRequest:
      title: CreateaJobRequest
      required:
        - company
        - position
        - status
      type: object
      properties:
        company:
          type: string
        position:
          type: string
        status:
          type: string
      example:
        company: Software Solutions
        position: Backend Developer
        status: declined
    UpdateJobRequest:
      title: UpdateJobRequest
      required:
        - company
        - position
        - status
      type: object
      properties:
        company:
          type: string
        position:
          type: string
        status:
          type: string
      example:
        company: Updated Company
        position: Updated Position
        status: updated
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
security: []
tags:
  - name: Misc
    description: ''
  - name: Auth
    description: ''
  - name: Job
    description: ''
